import numpy as np
import networkx as nx
from concurrent.futures import ThreadPoolExecutor

def HONE_worker(adj_matrix, dim, iterations, tol, seed, dt, gamma):
    """
    Harmonic Oscillator Network Embedding (HONE) worker function using overdamped dynamics on CPU.
    """
    np.random.seed(seed)
    positions = np.random.rand(adj_matrix.shape[0], dim)
    velocities = np.zeros_like(positions)

    def calculate_forces(positions):
        forces = np.zeros_like(positions)
        for i in range(len(positions)):
            delta = positions - positions[i]
            distances = np.linalg.norm(delta, axis=1)
            mask = distances > 1e-6  # Avoid division by zero
            forces[i] = np.sum(adj_matrix[i, mask][:, None] * (delta[mask] / distances[mask, None]), axis=0)
        return forces

    for _ in range(iterations):
        forces = calculate_forces(positions)
        velocities = -forces / gamma
        new_positions = positions + velocities * dt

        total_movement = np.sum(np.linalg.norm(new_positions - positions, axis=1))
        if total_movement < tol:
            break
        positions = new_positions

    distances = np.linalg.norm(positions[:, None] - positions[None, :], axis=2)
    return positions, distances

def HONE(G, dim=2, iterations=100, seed_ensemble=100, tol=1e-4, dt=0.01, gamma=1.0):
    """
    Harmonic Oscillator Network Embedding (HONE) using CPU-based overdamped dynamics.
    """
    if nx.is_weighted(G):
        adj_matrix = np.asarray(nx.to_numpy_array(G, weight="weight"))
    else:
        adj_matrix = np.asarray(nx.to_numpy_array(G))
        adj_matrix[adj_matrix > 0] = 1

    results = [None] * seed_ensemble

    # Multithreading for parallelism
    with ThreadPoolExecutor() as executor:
        futures = [
            executor.submit(HONE_worker, adj_matrix, dim, iterations, tol, seed, dt, gamma)
            for seed in range(seed_ensemble)
        ]
        for i, future in enumerate(futures):
            results[i] = future.result()

    # 결과 정리
    ensemble_positions = [result[0] for result in results]
    distance_matrices = np.array([result[1] for result in results])

    return ensemble_positions, distance_matrices

def HNI(distance_matrices):
    """
    Harmonic Network Inconsistency (HNI) calculation.
    Calculates variance for each node pair across ensembles and averages these variances.
    """
    pairwise_variances = np.var(distance_matrices, axis=0)  # Shape: (num_nodes, num_nodes)
    upper_tri_indices = np.triu_indices_from(pairwise_variances, k=1)
    upper_tri_variances = pairwise_variances[upper_tri_indices]
    return np.mean(upper_tri_variances)
